Leandro Luis Lavandosque - 12531850 
CEN0336 - Python 08 problem set - Report 






Organization of my report: Following the exercises’ request, the results will be shown in this report as samples following the same layout presented, considering the order and number of evidence requested. Major data can be obtained by executing the routine or by .txt or .nt archive associated.




Task no1.


Q: Take a multi-FASTA Python_08.fasta file from user input and calculate the nucleotide composition for each sequence. Use a datastructure to keep count. Print out each sequence name and its composition in this format seqName\tA_count\tT_count\tG_count\C_count
Here is a handy datastructure to store this information.


seqs[geneName][nucleotide]=count


seqs['geneA']['A'] = 2
seqs['geneA']['T'] = 3
seqs['geneA']['G'] = 3
seqs['geneA']['C'] = 1




seqs['geneB']['A'] = 1
seqs['geneB']['T'] = 5
seqs['geneB']['G'] = 2
seqs['geneB']['C'] = 2




A: Task no1. output
In command line: ./Python08_1.py




>c0_g1_i1 G: 206
>c0_g1_i1 A: 360
>c0_g1_i1 C: 227
>c0_g1_i1 T: 370




>c1_g1_i1 A: 252
>c1_g1_i1 C: 127
>c1_g1_i1 G: 159
>c1_g1_i1 T: 246




…  The complete output from this task can be seen by executing the program.




Task no2.


Q: Write a script that takes a multi-FASTA file Python_08.fasta from user input and breaks each sequence into codons (every three nucleotides is a codon) in just the first reading frame. Your output should look like this:


seq1-frame-1-codons
CAT GCT TGA GTC


Write the output to a file called 'Python_08.codons-frame-1.nt'.






A: Output was registered in a file called 'Python_08.codons-frame-1.nt'.


As a sample of result, the codons produced by the first sequence can be seen, organized through the layout requested.




c0_g1_i1-frame-1-codons
GAA CTC CAA AAA TGA AAA CAT AGT AGC AAT CAA AGC ATC CCA CTA TTT TTT GTC TCT CGT TTC ATT AGC GTT GTA AAT TAC TGA TAC CCT ACT ATA CCT CTA CAA GGC CTT TGT CAT CTT TTT ACT CAA GTG TGA AAT CAT CAC TTA TTG TAT GAA GGA TGA GCT TTC CGT TCG CTA GTT TGC TGA AAA GGC CTT CTG CAA TAA GCT CTC TAT TAT CTT TAA AAA AAC CTG GTT CCT GGT CTT CCA TTC TGC TAA AAG CTG TAG GGG TTT TAT CAC GAG ATT CCC GTT GGC ATT CTG ACT TAT TAA AAA TGC TTA CAG AAG AAA TGG ATT CTT TAA ATG GTC AAA TTA ATA CGT GGA CAG ATA ATA ATC CTT TAT TAG ATG AAA TTA CGA AGC CAT ACA GAA AAT CTT CAA CTC GTT TTT TTC ATC CGC TTC TTG TAC TTC TAA TGT CTA GAG CAT CAG TAA ATG GGG ATC CAC CGA GTC AGC AAC TAT TTC AAA GGT ACA AAC AAC TTG CCC GTG TAA CAG AAT TGA TTC ATG CTG CCA ATA TAA TTC ATA TTA ATA TTG GAG AAG AAC AAA GCA ACG AAC AGA TTA AAC TTG CAA CGT TGG TTG GAG ATT ATT TAC TCG GAA AGG CGT CTG TTG ATT TAG CAC ATT TAG AAA ACA ACG CTA TTA CAG AAA TTA TGG CTT CTG TTA TTG CAA ACT TAG TTG AAG GGC ACT TCG GAA GCC GAC AAA ATG GCT CTG TTG GTT TGT CAA ACG AAC GAA CCA TCC TTC TGC AAT CAG CCT TTA TGC CAG CAA AGG CAT GTT TAT GCG CAA GCA TAT TGA ATA ACT CAT CAC AAT ACA TTA ATG ATG CGT GTT TCA ATT ATG GAA AAT TTC TAG GCT TAT CGC TGC AAC TGG CCC ATA AGC CTG TAT CTC CTG ACG CCC AAG TTT TGC AAA AGA ATA ATG ACA TTT TGA AAA CAT ATG TTG AGA ATG CCA AGA GCT CAT TGT CTG TTT TCC CCG ATA TAG AGG CTA AGC AAG CTC TCA TGG AAA TCG CTA ATA GTG TTT CGA AGT AAT CGA CAG GTA TTG TAT CCT GGA TTA ATA TTA GGG TGG CTC ATG CAT GCT CGT GCA ATC GTA ACA AAT ATG TCT TTC TTT TAC GAA TTT TAA CGC TTC AAT ATA AAT CAT ATT TTT CCT




        
Task no3.


Q: Now produce codons in the first three reading frames for each sequence and print out ids and sequence records for each frame and print to a file called 'Python_08.codons-3frames.nt'
For example


seq1-frame-1-codons
ATG TTG


seq-frame-2-codons
TGT TGA


A: Output was registered in a file called  'Python_08.codons-3frames.nt'.


In command line: ./Python08_3.py


c0_g1_i1-frame-1codons
GAA CTC CAA AAA TGA AAA CAT (...)




c0_g1_i1-frame-2codons
AAC TCC AAA AAT GAA AAC ATA (...)




Task no4.


Q: Now reverse complement each sequence and print out all six reading frames to a file called 'Python_08.codons-6frames.nt'


A: Output was registered in a file called  'Python_08.codons-6frames.nt'
In command line: ./Python08_4.py


As a sample, the beginning of the sequences, considering alterations in frame, are presented by their first nine nucleotides:


c0_g1_i1_frame_+1
GAA CTC CAA AAA TGA


c0_g1_i1_frame_-1
ACT CCT TTT TAT ACT


c0_g1_i1_frame_+2
AAC TCC AAA AAT GAA


c0_g1_i1_frame_-2
CTC CTT TTT ATA CTA


c0_g1_i1_frame_+3
ACT CCA AAA ATG AAA


c0_g1_i1_frame_-3
TCC TTT TTA TAC TAA


Complete sequences can be accessed in the described document.




Task no5.


Q: Translate each of the six reading frames into amino acids. Create one file for which you print the six reading frames (Python_08.codons-6frames.nt) and one file for which you print the translation of the six reading frames (Python_08.translated.aa). Use the following translation table:


translation_table = {
    'GCT':'A', 'GCC':'A', 'GCA':'A', 'GCG':'A',
    'CGT':'R', 'CGC':'R', 'CGA':'R', 'CGG':'R', 'AGA':'R', 'AGG':'R',
    'AAT':'N', 'AAC':'N',
    'GAT':'D', 'GAC':'D',
    'TGT':'C', 'TGC':'C',
    'CAA':'Q', 'CAG':'Q',
    'GAA':'E', 'GAG':'E',
    'GGT':'G', 'GGC':'G', 'GGA':'G', 'GGG':'G',
    'CAT':'H', 'CAC':'H',
    'ATT':'I', 'ATC':'I', 'ATA':'I',
    'TTA':'L', 'TTG':'L', 'CTT':'L', 'CTC':'L', 'CTA':'L', 'CTG':'L',
    'AAA':'K', 'AAG':'K',
    'ATG':'M',
    'TTT':'F', 'TTC':'F',
    'CCT':'P', 'CCC':'P', 'CCA':'P', 'CCG':'P',
    'TCT':'S', 'TCC':'S', 'TCA':'S', 'TCG':'S', 'AGT':'S', 'AGC':'S',
    'ACT':'T', 'ACC':'T', 'ACA':'T', 'ACG':'T',
    'TGG':'W',
    'TAT':'Y', 'TAC':'Y',
    'GTT':'V', 'GTC':'V', 'GTA':'V', 'GTG':'V',
    'TAA':'*', 'TGA':'*', 'TAG':'*'
}


A: Using the respective table, outputs of translated sequences were registered in the file called ‘Python_08.translated.aa’ based on  'Python_08.codons-6frames.nt' input. 


In command line: ./Python08_5.py


Here follows a sample of sequence translation, considering frame dynamics (previous task).


c0_g1_i1_frame_+1
ELQK*KHSSNQSIPLFFVSRFISVVNY*YPTIPLQGLCHLFTQV*NHHLLYEG*AFRSLVC*KGLLQ*ALYYL*KNLVPGLPFC*KL*GFYHEIPVGILTY*KCLQKKWIL*MVKLIRGQIIILY*MKLRSHTENLQLVFFIRFLYF*CLEHQ*MGIHRVSNYFKGTNNLPV*QN*FMLPI*FILILEKNKATNRLNLQRWLEIIYSERRLLI*HI*KTTLLQKLWLLLLQT*LKGTSEADKMALLVCQTNEPSFCNQPLCQQRHVYAQAY*ITHHNTLMMRVSIMENF*AYRCNWPISLYLLTPKFCKRIMTF*KHMLRMPRAHCLFSPI*RLSKLSWKSLIVFRSNRQVLYPGLILGWLMHARAIVTNMSFFYEF*RFNINHIFP


c0_g1_i1_frame_-1
TPFYTKYNFAILSIFFLYKQC*RARTYSVGL*LGPMLWTANEAL**SLKVLSNESEI*PLLSVTREP*ELYTKVLQ**ENVLNPQSSMSEYPVNVAIRIFKRY*LCA**LHNTTQ*VIRTRICTETTVFPTNVFLPSKQTVWLSR*NSRRLHGKLIQTLLSSVLKTLSQQKIYTI*LSAERLIY*RLVATFKLDKQRNKKRL*LYLI*PSYLVKTMCPFNKHGNFIND*AT*G*MTTRSVIFMFFAYFFCSTSKRHTEALK*IIS***TGA*LNW*IS*VKKTFVKIIQSYGCP*STILGMSKIVLPSGPWSKKISIISRITSSGKVV*SLAFRVGSMLFTTKV*THFSTVSGTSPYHPIVIKCCDYFALCFLSPYETNDDTKVKTS


c0_g1_i1_frame_+2
NSKNENIVAIKASHYFLSLVSLAL*ITDTLLYLYKAFVIFLLKCEIITYCMKDELSVR*FAEKAFCNKLSIIFKKTWFLVFHSAKSCRGFITRFPLAF*LIKNAYRRNGFFKWSN*YVDR**SFIR*NYEAIQKIFNSFFSSASCTSNV*SISKWGSTESATISKVQTTCPCNRIDSCCQYNSY*YWRRTKQRTD*TCNVGWRLFTRKGVC*FSTFRKQRYYRNYGFCYCKLS*RALRKPTKWLCWFVKRTNHPSAISLYASKGMFMRKHIE*LITIH**CVFQLWKISRLIAATGP*ACIS*RPSFAKE**HFENIC*ECQELIVCFPRYRG*ASSHGNR**CFEVIDRYCILD*Y*GGSCMLVQS*QICLSFTNFNASI*IIFFL


c0_g1_i1_frame_-2
LLFILNITSQF*AFSFCINNANVLVRTRWDYN*VLCYGQLMKLCDNR*RYSRTNRRYSPFCLLLENRKSCIQKFYSNKKTF*TRSPLCPNTRSTSLFGSLKGINFVRSNYITLLNKLYERVFVRKRPYFRLTSSYQASKLFGCLGKTAEGFTGS*FKRYCLRY*RHYRNKRFTRFSCLRKGSFIRGWLQRSN*TSNETRRGYNYT*YNRRT*LRQCARSTNMETLSTTEPPRGK*LRDL*SSCSSPTFFAQLLKDIPKH*SRLFPNNRQVHN*TGKFLR*RRHS*KLFSLTVALRALFWGCRKSSYLLVLGPKKFLLSLE*RLPEKSFDRLPFE*EVCYSLLKCELIFLLFPEHLHIIP*SLNVAITLLSVFYHPTKLTMIQK*KPQ


c0_g1_i1_frame_+3
TPKMKT**QSKHPTIFCLSFH*RCKLLIPYYTSTRPLSSFYSSVKSSLIV*RMSFPFASLLKRPSAISSLLSLKKPGSWSSILLKAVGVLSRDSRWHSDLLKMLTEEMDSLNGQINTWTDNNPLLDEITKPYRKSSTRFFHPLLVLLMSRASVNGDPPSQQLFQRYKQLARVTELIHAANIIHINIGEEQSNEQIKLATLVGDYLLGKASVDLAHLENNAITEIMASVIANLVEGHFGSRQNGSVGLSNERTILLQSAFMPAKACLCASILNNSSQYINDACFNYGKFLGLSLQLAHKPVSPDAQVLQKNNDILKTYVENAKSSLSVFPDIEAKQALMEIANSVSK*STGIVSWINIRVAHACSCNRNKYVFLLRILTLQYKSYFSS


c0_g1_i1_frame_-3
SFLY*I*LRNFKHFLSV*TMLTCSYVLGGIIIRSYVMDS**SFVIIAKGTLERIGDIAPFVCYSRTVRVVYKSFTVIRKRFEPAVLYVRIPGQRRYSDL*KVLTLCVVIT*HYSISYTNAYLYGNDRISD*RLPTKQANCLVVSVKQPKASREVDSNVIVFGIKDIIATKDLHDLVVCGKAHLLEVGCNVQIRQATKQEEVIIILNITVVLS*DNVPVQQTWKLYQRLSHLGVNDYEICNLHVLRLLFLLNF*KTYRSIKVDYFLIIDRCIIKLVNFLGKEDIRKNYSVLRLPLEHYFGDVENRLTFWSLVQKNFYYLSNNVFRKSRLIACLSSRKYVIHY*SVNSFFYCFRNISISSHSH*MLRLLCSLFFITLRN*R*YKSKNLK


Task no6.


Q: Find the longest peptide sequence (M => Stop) of all the six translated reading frames for a single sequence. Do this for all the sequence records. For each sequence, print out in FASTA format the six frames of codons to one file (Python_08.codons-6frames.nt), the translations to a second file (Python_08.translated.aa), and the single longest translated peptide to a third file (Python_08.translated-longest.aa).


A: Considering the previous archive, outputs of “Python_08.codons-6frames.nt” and “Python_08.translated.aa” were written in FASTA format (“Python_08.fasta”). The single longest translated peptide of all analyzed genes were registered in ‘Python_08.translated-longest.aa’.
Condition: Start (Methionine ‘M’)  —-----> Stop (Stop codon ‘*’); Sequence c2_g1 does not present frames starting with ‘M’, which leads its sequence to not produce an expected result/output.


In command line: ./Python08_6.py


c0_g1_i1frame_+3
MSFPFASLLKRPSAISSLLSLKKPGSWSSILLKAVGVLSRDSRWHSDLLKMLTEEMDSLNGQINTWTDNNPLLDEITKPYRKSSTRFFHPLLVLLMSRASVNGDPPSQQLFQRYKQLARVTELIHAANIIHINIGEEQSNEQIKLATLVGDYLLGKASVDLAHLENNAITEIMASVIANLVEGHFGSRQNGSVGLSNERTILLQSAFMPAKACLCASILNNSSQYINDACFNYGKFLGLSLQLAHKPVSPDAQVLQKNNDILKTYVENAKSSLSVFPDIEAKQALMEIANSVSK*
c1_g1_i1frame_-2
MVDLFYPVLLTTVVRYVKKENVICNPFLSDIFIYFRFVCLFIILFLLAIITIF*
c3_g1_i1frame_+2
MGLGFSSKKQLPAYCGPLPVGSLVLELSVPEEFRCEYKTIEHKLRTV 


Task no7.


Q: Finally determine which subset of codons produced the longest peptide for each sequence record. Print this to a fourth file in FASTA format (Python_08.orf-longest.nt).


A: Output was registered in a file called  'Python_08.orf-longest.nt'
 In command line: ./Python08_7.py


Output sample:
c0_g1_i1        frame_+3
ATG AGC TTT CCG TTC GCT AGT TTG CTG AAA AGG CCT TCT GCA ATA AGC TCT CTA TTA TCT TTA AAA AAA CCT GGT TCC TGG TCT TCC ATT CTG CTA AAA GCT GTA GGG GTT TTA TCA CGA GAT TCC CGT TGG CAT TCT GAC TTA TTA AAA ATG CTT ACA GAA GAA ATG GAT TCT TTA AAT GGT CAA ATT AAT ACG TGG ACA GAT AAT AAT CCT TTA TTA GAT GAA ATT ACG AAG CCA TAC AGA AAA TCT TCA ACT CGT TTT TTT CAT CCG CTT CTT GTA CTT CTA ATG TCT AGA GCA TCA GTA AAT GGG GAT CCA CCG AGT CAG CAA CTA TTT CAA AGG TAC AAA CAA CTT GCC CGT GTA ACA GAA TTG ATT CAT GCT GCC AAT ATA ATT CAT ATT AAT ATT GGA GAA GAA CAA AGC AAC GAA CAG ATT AAA CTT GCA ACG TTG GTT GGA GAT TAT TTA CTC GGA AAG GCG TCT GTT GAT TTA GCA CAT TTA GAA AAC AAC GCT ATT ACA GAA ATT ATG GCT TCT GTT ATT GCA AAC TTA GTT GAA GGG CAC TTC GGA AGC CGA CAA AAT GGC TCT GTT GGT TTG TCA AAC GAA CGA ACC ATC CTT CTG CAA TCA GCC TTT ATG CCA GCA AAG GCA TGT TTA TGC GCA AGC ATA TTG AAT AAC TCA TCA CAA TAC ATT AAT GAT GCG TGT TTC AAT TAT GGA AAA TTT CTA GGC TTA TCG CTG CAA CTG GCC CAT AAG CCT GTA TCT CCT GAC GCC CAA GTT TTG CAA AAG AAT AAT GAC ATT TTG AAA ACA TAT GTT GAG AAT GCC AAG AGC TCA TTG TCT GTT TTC CCC GAT ATA GAG GCT AAG CAA GCT CTC ATG GAA ATC GCT AAT AGT GTT TCG AAG TAA


MSFPFASLLKRPSAISSLLSLKKPGSWSSILLKAVGVLSRDSRWHSDLLKMLTEEMDSLNGQINTWTDNNPLLDEITKPYRKSSTRFFHPLLVLLMSRASVNGDPPSQQLFQRYKQLARVTELIHAANIIHINIGEEQSNEQIKLATLVGDYLLGKASVDLAHLENNAITEIMASVIANLVEGHFGSRQNGSVGLSNERTILLQSAFMPAKACLCASILNNSSQYINDACFNYGKFLGLSLQLAHKPVSPDAQVLQKNNDILKTYVENAKSSLSVFPDIEAKQALMEIANSVSK*